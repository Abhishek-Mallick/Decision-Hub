{"version":3,"sources":["webpack:///./src/registerServiceWorker.js"],"names":["refresh","invokeServiceWorkerUpdateFlow","registration","agree","confirm","waiting","postMessage","type","navigator","window","addEventListener","serviceWorker","register","newRegestration","installing","controller","location","reload","events","send"],"mappings":"+JACIA,GAAU,EAEd,SAASC,EAA+BC,GACtC,IAAMC,EAAQC,QAAQ,qDAClBD,GACED,EAAaG,UAEfL,GAAU,EACVE,EAAaG,QAAQC,YAAY,CAAEC,KAAM,kBAK3C,kBAAmBC,YACrBC,OAAOC,iBAAiB,OAAxB,sCAAgC,kHACHF,UAAUG,cAAcC,SAAS,qBAD9B,OACxBV,EADwB,OAI1BA,EAAaG,SACfJ,EAA8BC,GAIhCA,EAAaQ,iBAAiB,eAAe,WAC3C,IAAMG,EAAkBX,EAAaY,WACjCD,GAEFA,EAAgBH,iBAAiB,eAAe,WAC1CR,EAAaG,SAAWG,UAAUG,cAAcI,YAClDd,EAA8BC,SAOtCM,UAAUG,cAAcD,iBAAiB,oBAAoB,WACvDV,IACFS,OAAOO,SAASC,SAChBjB,GAAU,MAzBgB,4CA8BhCS,OAAOC,iBAAiB,gBAAgB,WACtCQ,OAAOC,KAAK","file":"js/chunk-2d22998c.fc808a1d.js","sourcesContent":["import events from '@/lib/utils/events'\nlet refresh = false\n\nfunction invokeServiceWorkerUpdateFlow (registration) {\n  const agree = confirm('New version of the app is available. Refresh now?')\n  if (agree) {\n    if (registration.waiting) {\n      // let waiting Service Worker know it should became active\n      refresh = true\n      registration.waiting.postMessage({ type: 'SKIP_WAITING' })\n    }\n  }\n}\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', async () => {\n    const registration = await navigator.serviceWorker.register('service-worker.js')\n    // ensure the case when the updatefound event was missed is also handled\n    // by re-invoking the prompt when there's a waiting Service Worker\n    if (registration.waiting) {\n      invokeServiceWorkerUpdateFlow(registration)\n    }\n\n    // detect Service Worker update available and wait for it to become installed\n    registration.addEventListener('updatefound', () => {\n      const newRegestration = registration.installing\n      if (newRegestration) {\n        // wait until the new Service worker is actually installed (ready to take over)\n        newRegestration.addEventListener('statechange', () => {\n          if (registration.waiting && navigator.serviceWorker.controller) {\n            invokeServiceWorkerUpdateFlow(registration)\n          }\n        })\n      }\n    })\n\n    // detect controller change and refresh the page\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (refresh) {\n        window.location.reload()\n        refresh = false\n      }\n    })\n  })\n\n  window.addEventListener('appinstalled', () => {\n    events.send('pwa.install')\n  })\n}\n"],"sourceRoot":""}